{"version":3,"sources":["components/DragAndDrop.js","components/FileAttributes.js","components/RenderResults.js","api/engineApi.js","components/LoadingIndicator.js","components/ProcessFile.js","components/App.js","index.js","logo.svg"],"names":["DragAndDrop","props","useState","drag","setDrag","dragCounter","setDragCounter","handleDrag","e","preventDefault","stopPropagation","handleDragIn","dataTransfer","items","length","handleDragOut","handleDrop","files","clearData","dropRef","React","createRef","useEffect","div","current","addEventListener","removeEventListener","className","ref","children","FileAttributes","truncated","fileName","fileExtension","fileType","fileSize","substring","content","RenderResults","results","map","result","index","key","engineApi","apiKey","file","data","FormData","append","console","log","fetch","urlPrefix","method","body","headers","LoadingIndicator","loading","zipHelper","blob","zip","JSZip","Promise","resolve","reject","loadAsync","then","loadedZip","fileRefs","Object","values","zipFileReaders","Array","from","forEach","zf","a","dir","push","async","name","all","ProcessFile","setResults","filesProcessed","setFilesProcessed","setLoading","zipUnpackingTasks","fileTypeDetectionCalls","getFileTypeAsync","extension","handleBlob","response","responseToJson","json","getResultFromDeserialised","status","deserialised","toLowerCase","split","pop","zipHandleTask","zippedFiles","error","zt","responses","CSSTransition","in","timeout","enter","exit","classNames","App","setApiKey","src","logo","alt","height","type","placeholder","onInput","event","target","value","hidden","ReactDOM","render","document","getElementById","module","exports"],"mappings":"mQAoEeA,MAlEf,SAAqBC,GAAQ,IAAD,EACJC,oBAAS,GADL,mBACrBC,EADqB,KACfC,EADe,OAEUF,oBAAS,GAFnB,mBAErBG,EAFqB,KAERC,EAFQ,KAItBC,EAAa,SAACC,GAChBA,EAAEC,iBACFD,EAAEE,mBAGAC,EAAe,SAACH,GAClBA,EAAEC,iBACFD,EAAEE,kBACFJ,EAAeD,KACXG,EAAEI,aAAaC,OAASL,EAAEI,aAAaC,MAAMC,OAAS,GACxDV,GAAQ,IAIRW,EAAgB,SAACP,GACnBA,EAAEC,iBACFD,EAAEE,kBACFJ,EAAeD,KACK,IAAhBA,GACFD,GAAQ,IAGRY,EAAa,SAACR,GAIhB,GAHAA,EAAEC,iBACFD,EAAEE,kBACFN,GAAQ,GACJI,EAAEI,aAAaK,OAAST,EAAEI,aAAaK,MAAMH,OAAS,EAAG,CAC3Db,EAAMe,WAAWR,EAAEI,aAAaK,OAChC,IACAT,EAAEI,aAAaM,YAEf,UAIAZ,EAAe,KAIfa,EAAUC,IAAMC,YAclB,OAbFC,qBAAU,WACR,IAAIC,EAAMJ,EAAQK,QAKlB,OAJAD,EAAIE,iBAAiB,YAAad,GAClCY,EAAIE,iBAAiB,YAAaV,GAClCQ,EAAIE,iBAAiB,WAAYlB,GACjCgB,EAAIE,iBAAiB,OAAQT,GACtB,WACPO,EAAIG,oBAAoB,YAAaf,GACrCY,EAAIG,oBAAoB,YAAaX,GACrCQ,EAAIG,oBAAoB,WAAYnB,GACpCgB,EAAIG,oBAAoB,OAAQV,MAEjC,IAEG,yBAAKW,UAAU,cAAcC,IAAKT,GAE9BhB,GAAQ,yBAAKwB,UAAU,yBAExB1B,EAAM4B,W,cCnCAC,MAzBf,YAA0E,IAGpEC,EAHoBC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAa3D,OAPEJ,EAFEC,EAASlB,OAFS,GAIRkB,EAASI,UAAU,EAJX,IAQRJ,EAIN,wBAAIL,UAAWM,IAAkBC,EAAW,cAAgB,IAC1D,kBAAC,IAAD,CAAOG,QAASL,GAChB,4BAAKA,IAAaD,EAAYC,EAAzB,UAAuCD,EAAvC,cAAsDE,KAE3D,4BAAKA,GACL,4BAAKC,GACL,4BAAKC,KCEFG,MAvBf,SAAuBrC,GACrB,OACE,6BAAS0B,UAAU,mBACnB,yBAAKA,UAAU,mCACb,wBAAIA,UAAU,gBAAd,mBACA,+BACE,+BACE,wBAAIA,UAAU,cACd,yCACA,kDACA,gDACA,2CAGF,+BACG1B,EAAMsC,SAAWtC,EAAMsC,QAAQC,KAAI,SAACC,EAAQC,GAAT,OAAmB,kBAAC,EAAD,eAAgBC,IAAG,iBAAYD,IAAaD,YCChGG,EAhBO,SAACC,EAAQC,GACzB,IAAIC,EAAO,IAAIC,SAMf,OAJAD,EAAKE,OAAO,OAAQH,GAEpBI,QAAQC,IAAIL,GAELM,MATkBC,oFASU,CACjCC,OAAQ,OACRC,KAAMR,EACNS,QAAS,CACP,YAAaX,M,MCANY,MAXf,SAA0BxD,GACxB,OAAKA,EAAMyD,QAIP,yBAAK/B,UAAU,qBACb,yBAAKA,UAAU,aAJZ,M,0BCuBLgC,EAnBe,SAACC,GAClB,IAAIC,EAAM,IAAIC,IACd,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBJ,EAAIK,UAAUN,GAAMO,MAAK,SAAAC,GACrB,IAAMC,EAAWC,OAAOC,OAAOH,EAAUnD,OACrCuD,EAAiB,GACrBC,MAAMC,KAAKL,GAAUM,QAArB,uCAA6B,WAAOC,GAAP,SAAAC,EAAA,sDACpBD,EAAGE,KACJN,EAAeO,KAAKH,EAAGI,MAAM,QAAQb,MAAK,SAAAP,GAEtC,OADAA,EAAKqB,KAAOL,EAAGK,KACRrB,MAJU,2CAA7B,uDAQAG,QAAQmB,IAAIV,GAAgBL,KAAKH,EAASC,KAC3CA,OAgHIkB,MAxGf,SAAqBlF,GAAQ,IAAD,EACIC,mBAAS,MADb,mBACnBqC,EADmB,KACV6C,EADU,OAEkBlF,oBAAS,GAF3B,mBAEnBmF,EAFmB,KAEHC,EAFG,OAGIpF,oBAAS,GAHb,mBAGnBwD,EAHmB,KAGV6B,EAHU,KAuFxB,OACI,yBAAK5D,UAAU,YACX,+HACA,kBAAC,EAAD,CAAaX,WArFJ,SAAAC,GACbsE,GAAW,GACXD,GAAkB,GAClBF,EAAW,IAEX,IAAII,EAAoB,GACpBC,EAAyB,GACzBC,EAAmB,SAAC5C,EAAM6C,GAE5B,OAAO,IAAI5B,SAAQ,SAACC,GAClB,IAAIvB,EAAS,CACTT,SAAUc,EAAKmC,KACfhD,cAAe0D,EACfzD,SAAU,UACVC,SAAU,GAGVyD,EAAU,uCAAG,8BAAAf,EAAA,+EAEcjC,EAAsB3C,EAAM4C,OAAQC,GAFlD,cAEH+C,EAFG,gBAGUC,EAAeD,GAHzB,OAGHE,EAHG,OAITC,EAA0BD,EAAMjD,GAJvB,kDAOTI,QAAQC,IAAR,MAPS,QAUba,EAAQvB,GAVK,0DAAH,qDAaVqD,EAAiB,SAAAD,GACjB,OAAwB,MAApBA,EAASI,QACT/C,QAAQC,IAAI0C,GACL,CAAE3D,SAAU,QAASC,SAAU,EAAG8D,OAAQJ,EAASI,SAGvDJ,EAASE,QAGhBC,EAA4B,SAACE,GAG7B,OAFAzD,EAAOP,SAAWgE,EAAahE,SAASiE,cACxC1D,EAAON,SAAW+D,EAAa/D,SACxB+D,GAGXN,QAIJnB,MAAMC,KAAKzD,GAAO0D,SAAQ,SAAA7B,GACtB,IAAI6C,EAAY7C,EAAKmC,KAAKmB,MAAM,KAAKC,MAAMF,cAE3C,GAAkB,QAAdR,EAAqB,CACrB,IAAIW,EAAgB3C,EAAuBb,GAAMqB,MAAK,SAACoC,GACnDA,EAAY5B,SAAQ,SAAAC,GAClBe,EAAYf,EAAGK,KAAKmB,MAAM,KAAKC,MAAMF,cACrCvB,EAAGK,KAAO,IAAMnC,EAAKmC,KAAO,QAAUL,EAAGK,KACzCQ,EAAuBV,KAAKW,EAAiBd,EAAIe,UAEpD,SAAAa,GACDtD,QAAQC,IAAIqD,GACZf,EAAuBV,KAAKW,EAAiB5C,EAAM6C,OAGrDH,EAAkBT,KAAKuB,QAGvBb,EAAuBV,KAAKW,EAAiB5C,EAAM6C,OAI3D5B,QAAQmB,IAAIM,GAAmBrB,MAAK,SAACsC,GACnC1C,QAAQmB,IAAIO,GAAwBtB,MAAK,SAAAuC,GACvCtB,EAAWsB,GACXpB,GAAkB,GAClBC,GAAW,SAEZ,SAAAiB,GACDtD,QAAQC,IAAIqD,QAQN,yBAAK7E,UAAU,qBACX,kBAAC,EAAD,CAAkBgB,IAAK,EAAGe,QAASA,MAG3C,kBAACiD,EAAA,EAAD,CAAeC,GAAIvB,EAAgBwB,QAAS,CAAEC,MAAO,IAAKC,KAAM,KAAOC,WAAW,WAC9E,oCACK3B,GAAkB,kBAAC,EAAD,CAAe9C,QAASA,QCxGhD0E,MApBf,WAAgB,IAAD,EACa/G,mBAAS,4CADtB,mBACR2C,EADQ,KACAqE,EADA,KAOX,OACE,oCACE,yBAAKvF,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QAAO,yBAAKwF,IAAKC,IAAMC,IAAI,OAAOC,OAAO,SAE1D,2BAAOC,KAAK,OAAOC,YAAY,UAAUC,QAV5B,SAAAC,GACjBR,EAAUQ,EAAMC,OAAOC,QAS+CC,QAAM,IACxE,kBAAC,EAAD,CAAahF,OAAQA,OCd/BiF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,wCCLjDC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.45206c7a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nfunction DragAndDrop(props) {\n  var [drag, setDrag] = useState(false);\n  var [dragCounter, setDragCounter] = useState(false);\n\n  var handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  var handleDragIn = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragCounter(dragCounter++);\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n      setDrag(true);\n    }\n  };\n\n  var handleDragOut = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    setDragCounter(dragCounter--);\n    if (dragCounter === 0) {\n      setDrag(false);\n    }\n  }\n  var handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDrag(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      props.handleDrop(e.dataTransfer.files)\n      try {\n      e.dataTransfer.clearData()\n      } \n      catch \n      {\n\n      }\n      setDragCounter(0);\n    }\n  }\n  \n  var dropRef = React.createRef();\n  useEffect(() => {\n    let div = dropRef.current\n    div.addEventListener('dragenter', handleDragIn)\n    div.addEventListener('dragleave', handleDragOut)\n    div.addEventListener('dragover', handleDrag)\n    div.addEventListener('drop', handleDrop)\n    return () => {\n    div.removeEventListener('dragenter', handleDragIn)\n    div.removeEventListener('dragleave', handleDragOut)\n    div.removeEventListener('dragover', handleDrag)\n    div.removeEventListener('drop', handleDrop)\n  };\n}, []);\n    return (\n      <div className=\"drop-border\" ref={dropRef}>\n        {\n          drag && <div className=\"drop-border-dragging\"/>\n        }\n        {props.children}\n      </div>\n    );\n}\nexport default DragAndDrop;","import React from 'react';\nimport Tippy from '@tippy.js/react';\nimport 'tippy.js/dist/tippy.css';\n\nfunction FileAttributes({ fileName, fileExtension, fileType, fileSize }) {\n\n  const truncatLength = 40;\n  var truncated;\n  if (fileName.length > truncatLength)\n  {\n    truncated = fileName.substring(0, truncatLength);\n  }\n  else\n  {\n    truncated = fileName;\n  }\n\n  return (\n          <tr className={fileExtension !== fileType ? \"type-danger\" : \"\"}>\n            <Tippy content={fileName}>\n            <td>{fileName === truncated ? fileName : `${truncated}...${fileExtension}`}</td>\n            </Tippy>\n            <td>{fileExtension}</td>\n            <td>{fileType}</td>\n            <td>{fileSize}</td>\n          </tr>\n  );\n}\n\nexport default FileAttributes;","import React from \"react\";\nimport FileAttributes from \"./FileAttributes\";\n\nfunction RenderResults(props) {\n  return (\n    <section className=\"results-section\">\n    <div className=\"file-attributes table-container\">\n      <h1 className=\"table-header\">File Attributes</h1>\n      <table>\n        <thead>\n          <tr className=\"header-row\">\n          <th>File Name</th>\n          <th>Declared File Type</th>\n          <th>Actual File Type</th>\n          <th>File Size</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.results && props.results.map((result, index) => <FileAttributes key={`result-${index}`} {...result} />)}\n        </tbody>\n        </table>\n        </div>\n        </section>\n  );\n}\n\nexport default RenderResults;\n","const urlPrefix = 'https://xugc5ib648.execute-api.eu-west-1.amazonaws.com/Prod/';\nconst fileTypeDetectionUrl = urlPrefix + 'api/FileTypeDetection';\n\nconst getFileType = (apiKey, file) => {\n    var data = new FormData();\n    \n    data.append(\"file\", file);\n\n    console.log(file)\n    //return new Promise(() => {});\n    return fetch(fileTypeDetectionUrl, {\n      method: \"POST\",\n      body: data,\n      headers: {\n        \"x-api-key\": apiKey        \n      }\n    });\n}\n\nexport const engineApi = {\n  getFileType\n};\n","import {usePromiseTracker} from \"react-promise-tracker\";\nimport React from \"react\";\n\nfunction LoadingIndicator(props) {\n  if (!props.loading)\n    return null;\n\n  return (\n      <div className=\"spinner-container\">\n        <div className=\"spinner\"></div>\n      </div>\n  );\n}\n\nexport default LoadingIndicator;\n","import React, { useState } from \"react\";\nimport \"../App.css\";\n\nimport DragAndDrop from \"./DragAndDrop\";\nimport RenderResults from \"./RenderResults\";\nimport { engineApi } from \"../api/engineApi\";\nimport LoadingIndicator from \"./LoadingIndicator\";\nimport { CSSTransition } from \"react-transition-group\";\nimport JSZip from \"jszip\";\nconst readZipAsync = (blob) => {\n    var zip = new JSZip();\n    return new Promise((resolve, reject) => {\n        zip.loadAsync(blob).then(loadedZip => {\n            const fileRefs = Object.values(loadedZip.files);\n            var zipFileReaders = [];\n            Array.from(fileRefs).forEach(async (zf) => {\n                if (!zf.dir) {\n                    zipFileReaders.push(zf.async(\"blob\").then(blob => {\n                        blob.name = zf.name;\n                        return blob;\n                    }));\n                }\n            });\n            Promise.all(zipFileReaders).then(resolve, reject);\n        }, reject);\n    })\n}\n\nconst zipHelper = {\n    readZipAsync\n};\n\nfunction ProcessFile(props) {\n    var [results, setResults] = useState(null);\n    var [filesProcessed, setFilesProcessed] = useState(false);\n    var [loading, setLoading] = useState(false);\n\n    var handleDrop = files => {\n        setLoading(true);\n        setFilesProcessed(false);\n        setResults([]);\n\n        var zipUnpackingTasks = [];\n        var fileTypeDetectionCalls = [];\n        var getFileTypeAsync = (file, extension) => \n        {\n          return new Promise((resolve) => {\n            var result = { \n                fileName: file.name,\n                fileExtension: extension,\n                fileType: \"Unknown\",\n                fileSize: 0\n              };\n\n            var handleBlob = async () => {\n                try {\n                    const response = await engineApi.getFileType(props.apiKey, file);\n                    const json = await responseToJson(response);\n                    getResultFromDeserialised(json, file);\n                }\n                catch (error) {\n                    console.log(error);\n                }\n\n                resolve(result);\n            };\n\n            var responseToJson = response => {\n                if (response.status !== 200) {\n                    console.log(response);\n                    return { fileType: \"Error\", fileSize: 0, status: response.status };\n                }\n\n                return response.json();\n            };\n\n            var getResultFromDeserialised = (deserialised) => {\n                result.fileType = deserialised.fileType.toLowerCase();\n                result.fileSize = deserialised.fileSize;  \n                return deserialised;\n            };\n\n            handleBlob();\n        });\n      }\n\n        Array.from(files).forEach(file => {\n            var extension = file.name.split(\".\").pop().toLowerCase();\n\n            if (extension === \"zip\") {\n                var zipHandleTask = zipHelper.readZipAsync(file).then((zippedFiles) => {\n                    zippedFiles.forEach(zf => {\n                      extension = zf.name.split(\".\").pop().toLowerCase();\n                      zf.name = \"[\" + file.name + \"] -> \" + zf.name;\n                      fileTypeDetectionCalls.push(getFileTypeAsync(zf, extension));\n                    });\n                }, error => {\n                  console.log(error);\n                  fileTypeDetectionCalls.push(getFileTypeAsync(file, extension));\n\n                });\n                zipUnpackingTasks.push(zipHandleTask);\n            }\n            else {\n                fileTypeDetectionCalls.push(getFileTypeAsync(file, extension));\n            }\n        });\n\n        Promise.all(zipUnpackingTasks).then((zt) => {\n          Promise.all(fileTypeDetectionCalls).then(responses => {\n            setResults(responses);\n            setFilesProcessed(true);\n            setLoading(false);\n          });\n        }, error => {\n          console.log(error);\n        });\n    };\n\n    return (\n        <div className=\"app-body\">\n            <h1>Drag and drop files to determine their file type. Files in Zip's will be determined separately.</h1>\n            <DragAndDrop handleDrop={handleDrop}>\n                <div className=\"loading-container\">\n                    <LoadingIndicator key={6} loading={loading} />\n                </div>\n            </DragAndDrop>\n            <CSSTransition in={filesProcessed} timeout={{ enter: 500, exit: 500 }} classNames=\"results\">\n                <>\n                    {filesProcessed && <RenderResults results={results} />}\n                </>\n            </CSSTransition>\n        </div>\n    );\n}\n\nexport default ProcessFile;","import React, { useState } from \"react\";\nimport \"../App.css\";\nimport logo from \"../logo.svg\";\nimport ProcessFile from \"../components/ProcessFile\"\n\nfunction App() {\n  var [apiKey, setApiKey] = useState(\"v1j1jXSdPo8Z7iRW4H34va89ho9mt6KV5y9zezVn\");\n\n  var onApiKeyChange = event => {\n      setApiKey(event.target.value);\n  }\n\n    return (\n      <>\n        <div className=\"app\">\n          <div className=\"app-header\">\n            <div className=\"logo\"><img src={logo} alt=\"Logo\" height=\"90\" /></div>\n          </div>\n          <input type=\"text\" placeholder=\"Api Key\" onInput={onApiKeyChange} hidden />\n          <ProcessFile apiKey={apiKey}/>\n        </div>\n      </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/logo.6c8e5727.svg\";"],"sourceRoot":""}